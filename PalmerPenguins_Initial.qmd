---
title: "Palmer Penguins Initial Analysis"
author: "Vinny Chloros"
format: html
editor: visual
execute:
  keep-md: true
theme: darkly
---

# Palmer Penguins

(*Insert informative blurb here*)

```{r setup}
#| message: false

library(tidyverse)

penguins <- read_csv("https://raw.githubusercontent.com/mcduryea/Intro-to-Bioinformatics/main/data/penguins_samp1.csv")

penguins |> head()
```

After loading our packages and data, we can use the `head` function to take a peek at the first few rows of our data set.

## Displaying Data

```{r first count}
penguins |>
  count(island)
```

This simple command allows us to sort our data by count. In this case, R can count how many instances are in each category. Here we can see there are `36` penguins from Biscoe Island, `3` penguins from Dream Island, and `5` penguins from Torgersen Island.

```{r complex count}
penguins |>
  count(island, species)

#Dr. D's example
penguins %>%
  count(island, species) %>%
  pivot_wider(names_from = species, values_from = n, values_fill = 0)
```

By using the parameters of both island and species within `count`, we can see how many penguins of each species were found on the islands. The first line shows a simple way of executing the function that creates multiple instances of each island when there is a different species. 
The second command is Dr. Duryea's example for making a "prettier" version of the table, with separate columns for each species for better legibility.

```{r fancy count}
#| message: false
library(kableExtra)

#another example from Dr. D
penguins %>%
  count(island, species) %>%
  pivot_wider(names_from = species, values_from = n, values_fill = 0) %>%
  kable() %>%
  kable_styling(bootstrap_options = c("hover", "striped"))
```

An even prettier way to create a readable table is to utilize the `kableExtra` package. This creates a more table-like display with the same columns as the last example and some extra styling.

## Numerical Summaries

```{r numerical summaries}
penguins %>%
  summarize(mean_bill_length_mm = mean(bill_length_mm))

penguins %>%
  summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE))
```

Here, we can summarize one of our numerical values with `summarize()`. If there are values missing from the data, then R won't calculate the solution to your computation, and the result will be NA. To avoid this, we add `na.rm = TRUE` as a parameter.

```{r numerical percentiles}
penguins %>%
  summarize(
    min_bill_length = min(bill_length_mm, na.rm = TRUE),
    first_quartile_bill_length = quantile(bill_length_mm, 0.25, na.rm = TRUE),
    median_bill_length = median(bill_length_mm, na.rm = TRUE),
    mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),
    third_quartile_bill_length = quantile(bill_length_mm, 0.75, na.rm = TRUE),
    standard_deviation_bill_length = sd(bill_length_mm, na.rm = TRUE)
    ) %>%
  pivot_longer(cols = everything())
```

For more information, we can also find other statistics, like the minimum, maximum, mean, and more from our data. In each of them, we can include `na.rm = TRUE` to make sure R is returning a number and not `NA`.

```{r percentiles filtered}
penguins %>%
  filter(!is.na(bill_length_mm)) |>
  summarize(
    min_bill_length = min(bill_length_mm),
    first_quartile_bill_length = quantile(bill_length_mm, 0.25),
    median_bill_length = median(bill_length_mm),
    mean_bill_length_mm = mean(bill_length_mm),
    third_quartile_bill_length = quantile(bill_length_mm, 0.75),
    standard_deviation_bill_length = sd(bill_length_mm)
    ) %>%
  pivot_longer(cols = everything())
```

An easier way to remove all the missing values while running this analysis is to use a filter before summarizing. By using `!is.na`, we tell the function to include every value that isn't `NA`.

```{r percentiles fancy}
penguins %>%
  filter(!is.na(bill_length_mm)) |>
  summarize(
    min_bill_length = min(bill_length_mm),
    first_quartile_bill_length = quantile(bill_length_mm, 0.25),
    median_bill_length = median(bill_length_mm),
    mean_bill_length_mm = mean(bill_length_mm),
    third_quartile_bill_length = quantile(bill_length_mm, 0.75),
    standard_deviation_bill_length = sd(bill_length_mm)
    ) %>%
  pivot_longer(cols = everything()) |>
  kable() %>%
  kable_styling(bootstrap_options = c("hover", "striped"))
```

Now that everything is sorted, we can pipe our work into kable like before to make an appealing table.